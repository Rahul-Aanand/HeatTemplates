heat_template_version: 2013-05-23
description: >
  creating nodejs stack 

parameters:
  key:
    type: string
    description: >
      Name of a KeyPair to enable SSH access to the instance. Note that the
      default user is ec2-user.
    default: mykey

  flavor:
    type: string
    description: Instance type for the docker server.
    default: m1.tiny

  public_net:
    type: string
    description: name of public network for which floating IP addresses will be allocated.
    default: non-prod2

  availabilityZone:
    type: string
    default: nova

  vmAvailabilityZone:
    type: string
    default: JMNG-PE3-NONPROD  

  internalNet:
    type: string
    description: internal network name
  internalSubnet:
    type: string
    description: internal subnet name
  securityGroup:
    type: string
    description: security group name

  volumeName:
    type: string
    description: name of the bootable volume
  volumeSize:
    type: number
    default: 10
  bootImage:
    type: string
    default: Ubuntu1604





resources:
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { get_param: securityGroup }
      rules: [ 
             {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 22,
              "port_range_max": 22,
              "ethertype": IPv4,
              "protocol": tcp},
              {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 80,
              "port_range_max": 80,
              "ethertype": IPv4,
              "protocol": tcp},
              {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 443,
              "port_range_max": 443,
              "ethertype": IPv4,
              "protocol": tcp}  
            ]

  server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: internalNet }
      fixed_ips:
        - subnet_id: { get_param: internalSubnet  }
      security_groups:
        - { get_resource: security_group }


  server:
    type: OS::Nova::Server
    properties:
      availability_zone: { get_param: vmAvailabilityZone }
      key_name: { get_param: key }
      flavor: { get_param: flavor}
      networks:
        - port: { get_resource: server_port }
      block_device_mapping_v2:
        - device_name: vda
          volume_id: { get_resource: bootable_volume }
          delete_on_termination: True


      user_data: |
        #!/bin/bash -v
        sudo hostname localhost
        sudo -i
        export http_proxy=http://10.157.240.254:8678
        export https_proxy=http://10.157.240.254:8678
        echo "export http_proxy=http://10.157.240.254:8678" >> /etc/profile.d/proxy.sh
        echo "export https_proxy=http://10.157.240.254:8678" >> /etc/profile.d/proxy.sh
        echo  > /etc/apt/sources.list
        echo "###### Ubuntu Main Repos" >> /etc/apt/sources.list
        echo "deb http://in.archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse"  >> /etc/apt/sources.list
        echo "deb-src http://in.archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse" >> /etc/apt/sources.list
        echo "###### Ubuntu Update Repos" >> /etc/apt/sources.list
        echo "deb http://in.archive.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse" >> /etc/apt/sources.list
        echo "deb http://in.archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse" >> /etc/apt/sources.list
        echo "deb-src http://in.archive.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse" >> /etc/apt/sources.list
        echo "deb-src http://in.archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse"  >> /etc/apt/sources.list
        echo "deb http://nginx.org/packages/mainline/ubuntu/ xenial nginx" >> /etc/apt/sources.list
        echo "deb-src http://nginx.org/packages/mainline/ubuntu/ xenial nginx" >> /etc/apt/sources.list
        wget http://nginx.org/keys/nginx_signing.key
        apt-key add nginx_signing.key
        apt-get update -y
        apt-get install git -y
        apt-get install nginx -y
        systemctl start nginx
        
      

  server_floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: { get_param: public_net}

  associate_floating_ip:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: server_floating_ip}
      server_id: { get_resource: server}

  bootable_volume:
    type: OS::Cinder::Volume
    properties:
      name: { get_param: volumeName }
      size: { get_param: volumeSize }
      availability_zone: { get_param: availabilityZone }
      image: { get_param: bootImage }



outputs:
  network:
    description: ip address of vm
    value: { get_attr: [ server, networks ] }
